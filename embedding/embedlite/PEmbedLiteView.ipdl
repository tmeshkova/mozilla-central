/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

include protocol PEmbedLiteApp;

include "IPC/nsGUIEventIPC.h";
include "IPC/InputDataIPC.h";

using gfxSize;
using gfxRect;
using gfxPoint;
using nsIntPoint;
using mozilla::layers::FrameMetrics;
using nscolor;
using nsKeyEvent;
using nsMouseEvent;
using InputData;
using MultiTouchInput;

namespace mozilla {
namespace embedlite {

rpc protocol PEmbedLiteView {
    manager PEmbedLiteApp;
child:
    async LoadURL(nsString url);
    async GoBack();
    async GoForward();
    async StopLoad();
    async Reload(bool hardReload);
    async LoadFrameScript(nsString uri);
    async SetViewSize(gfxSize aSize);
    async SetIsActive(bool aIsActive);
    async AsyncScrollDOMEvent(gfxRect contentRect, gfxSize scrollSize);

    UpdateFrame(FrameMetrics frame) compress;
    HandleDoubleTap(nsIntPoint point);
    HandleSingleTap(nsIntPoint point);
    HandleLongTap(nsIntPoint point);
    HandleTextEvent(nsString commit, nsString preEdit);
    HandleKeyPressEvent(int domKeyCode, int gmodifiers, int charCode);
    HandleKeyReleaseEvent(int domKeyCode, int gmodifiers, int charCode);
    MouseEvent(nsString aType, float aX, float aY,
               int32_t aButton, int32_t aClickCount,
               int32_t aModifiers, bool aIgnoreRootScrollFrame);

    InputDataTouchEvent(MultiTouchInput event, gfxSize res, gfxPoint diff);
    // We use a separate message for touchmove events only to apply
    // compression to them.
    InputDataTouchMoveEvent(MultiTouchInput event, gfxSize res, gfxPoint diff) compress;

    // Prompt Interface
    async UnblockPrompt(uint64_t winID, bool checkValue, bool confirm,
                        nsString retValue, nsString username,
                        nsString password);
    async Destroy();

parent:
    async Initialized();
    async __delete__();

    async OnTitleChanged(nsString aTitle);
    async OnLocationChanged(nsCString aLocation, bool aCanGoBack, bool aCanGoForward);
    async OnLoadStarted(nsCString aLocation);
    async OnLoadFinished();
    async OnLoadRedirect();
    async OnLoadProgress(int32_t aProgress, int32_t aCurTotal, int32_t aMaxTotal);
    async OnSecurityChanged(nsCString aStatus, uint32_t aState);
    async OnFirstPaint(int32_t aX, int32_t aY);
    async OnContentLoaded(nsString aDocURI);
    async OnLinkAdded(nsString aHref, nsString aCharset, nsString aTitle, nsString aRel, nsString aSizes, nsString aType);
    async OnWindowOpenClose(nsString aType);
    async OnPopupBlocked(nsCString aSpec, nsCString aCharset, nsString aPopupFeatures, nsString aPopupWinName);
    async OnPageShowHide(nsString aType, bool aPersisted);
    async OnScrolledAreaChanged(uint32_t aWidth, uint32_t aHeight);
    async OnScrollChanged(int32_t offSetX, int32_t offSetY);
    async OnObserve(nsCString aTopic, nsString aData);
    UpdateZoomConstraints(bool aAllowZoom, float aMinZoom, float aMaxZoom);
    ZoomToRect(gfxRect aRect);
    async SetBackgroundColor(nscolor color);
    async CancelDefaultPanZoom();
    ContentReceivedTouch(bool aPreventDefault);
    async DetectScrollableSubframe();
    async OnContextUrl(nsString aHref, nsString aSrc);
    async OnRectChanged(float rectX, float rectY, float rectW, float rectH, float scrollW, float scrollH);

    sync SyncMessage(nsString aMessage, nsString aJSON)
      returns (nsString[] retval);

    // Prompt Interface
    async Alert(nsString title, nsString message, nsString checkMessage, bool checkValue, uint64_t winID);
    async Confirm(nsString title, nsString message, nsString checkMessage, bool checkValue, uint64_t winID);
    async Prompt(nsString title, nsString message, nsString defaultValue, nsString checkMessage, bool checkValue, uint64_t winID);
    async AuthentificationRequired(uint64_t requestID, nsCString hostname, nsCString httprealm, nsString username, bool isOnlyPassword);

    // IME
    sync GetInputContext() returns (int32_t IMEEnabled, int32_t IMEOpen,
                                    intptr_t NativeIMEContext);

    SetInputContext(int32_t IMEEnabled,
                    int32_t IMEOpen,
                    nsString type,
                    nsString inputmode,
                    nsString actionHint,
                    int32_t cause,
                    int32_t focusChange);

both:
    AsyncMessage(nsString aMessage, nsString aData);
};

}}
