/* -*- Mode: IDL; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
#include "nsISupports.idl"
#include "nsIDOMWindow.idl"
#include "nsIBaseWindow.idl"
#include "nsIWebBrowser.idl"
#include "nsIDOMEventTarget.idl"

/**
 * An optional interface for embedding clients wishing to receive
 * notifications for when a tooltip should be displayed or removed.
 * The embedder implements this interface on the web browser chrome
 * object associated with the window that notifications are required
 * for.
 *
 * @see nsIEmbedAppService
 */

%{C++
#include "nsStringGlue.h" // needed for AString -> nsAString, unfortunately
#include "mozilla/layers/GeckoContentController.h"
#include "FrameMetrics.h"
%}

[ref] native nsConstFrameMetrics(const mozilla::layers::FrameMetrics);
[ptr] native GeckoContentController(mozilla::layers::GeckoContentController);

[scriptable, uuid(99d60536-e1a7-11e2-b76e-ff454ce9029f)]
interface nsIEmbedMessageListener : nsISupports
{
    void onMessageReceived(in string messageName, in wstring message);
};

[scriptable, uuid(3c61976a-710b-11e2-a4a0-1354c757920d)]
interface nsIEmbedAppService : nsISupports
{
    // Get Embed View ID by DOMWindow
    void getIDByWindow(in nsIDOMWindow aWin, [retval] out uint32_t aId);
    // Send JSON Message to Embed View with related View ID
    void sendAsyncMessage(in uint32_t aId, in wstring messageName, in wstring message);
    void sendSyncMessage(in uint32_t aId, in wstring messageName, in wstring message,
                         [retval] out AString retval);
    // Subscribe to specific JSON Message which EmbedView posting to content from UI
    void addMessageListener(in string name, in nsIEmbedMessageListener listener);
    // Un Subscribe from specific JSON Message which EmbedView posting to content from UI
    void removeMessageListener(in string name, in nsIEmbedMessageListener listener);
    // Push Native secure JSContext into stuck in order to avoid security restrictions
    // in case if XPCOM api was executed from non priveledged script, like prompt calls
    void enterSecureJSContext();
    void leaveSecureJSContext();
    // Add listener for AZPC Gecko notifications (single/long/double tap..)
    [noscript] void addContentListener(in uint32_t aId, in GeckoContentController listener);
    [noscript] void removeContentListener(in uint32_t aId, in GeckoContentController listener);
    // Get EmbedLite nsIWebBrowser by unique ID C++ only
    void getBrowserByID(in uint32_t aId, out nsIWebBrowser outBrowser);
    void getContentWindowByID(in uint32_t aId, [retval] out nsIDOMWindow outWindow);

    // Simple interface which allow to send JSON message from XPCOM C++ components to related JS Frame script which handle this message
    void sendAsyncMessageLocal(in uint32_t aId, in wstring messageName, in wstring message);

    // AZPC Interface
    void getCompositedRectInCSS(in nsConstFrameMetrics aMetrics, out float aX, out float aY, out float aWidth, out float aHeight);
    void zoomToRect(in uint32_t aId, in float aX, in float aY, in float aWidth, in float aHeight);
    void contentReceivedTouch(in uint32_t aId, in boolean aPreventDefault);
    // Not sure how else to add event listener from js component without browser
    void chromeEventHandler(in nsIDOMWindow aWin, [retval] out nsIDOMEventTarget eventHandler);
    void getAnyEmbedWindow([optional] in boolean aActive, [retval] out nsIDOMWindow aWin);
};
